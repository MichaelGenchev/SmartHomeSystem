# build/Dockerfile.device

# Start from the latest golang base image
FROM golang:1.23 as builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/device-service

# Start a new stage from scratch

FROM alpine:latest  

RUN apk --no-cache add ca-certificates

WORKDIR /app

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/main .

# Create a non-root user
RUN adduser -D appuser
USER appuser

# Expose port 8080 to the outside world
EXPOSE 8080

# Add environment variables if needed
ENV LOG_LEVEL=info

# Add a health check
HEALTHCHECK --interval=30s --timeout=3s \

CMD wget -q --spider http://localhost:8080/health || exit 1

# Command to run the executable
CMD ["./main"]